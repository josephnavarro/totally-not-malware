#!usr/bin/env python
import tkinter, tempfile
from   tkinter import Tk, Label, Frame, Entry, Button
from   tkinter import Text, PhotoImage, mainloop
from   image   import IMAGE

#Basic stuff
W,H     = 440,180   #Window dimensions in pixels
DELAY   = 100       #Frame delay (ms) for GIF
COLOR   = '#ffcfff' #Background window color
STRINGS = {
    #Window caption
    'caption': [
        'Totally Not Malware',
        ],
    #Message displayed above forms
    'message': [
        'H-hi there...\n',
        'Do you th-think I could have your\n',
        'credit card information, p-please?',
        ],
    #Form-filling fields under message
    'fields': [
        'Card number:',
        'Expiry date:',
        'Security code:',
        ],
    #Text label on button
    'button': [
        'Th-thanks',
        ],
    }

#Fonts for labels and message
FIELD_FONT   = 'Arial 9 bold'
MESSAGE_FONT = 'Arial 11 bold'


#Card info isn't actually read in anywhere because
# - Ethics lol
# - I don't know how
#
#So to at least spoof the effect, the application
#enforces the length of each entry field

STRLEN_CARD   = 16 #Length of card number
STRLEN_EXPIRE = 5  #Length of expiry date
STRLEN_SECURE = 3  #Length of security code

#Force blank icon
import base64, zlib

ICON = zlib.decompress(base64.b64decode('eJxjYGAEQgEBBiDJwZDBy'
    'sAgxsDAoAHEQCEGBQaIOAg4sDIgACMUj4JRMApGwQgF/ykEAFXxQRc='))

_, ICON_PATH = tempfile.mkstemp()
with open(ICON_PATH, 'wb') as icon_file:
    icon_file.write(ICON)

#Utility functions
def safe_quit(master):
    #Quits the Tkinter application
    master.destroy()

def decode_image(imageData, frame):
    #Decodes a Base64 string into a GIF split at the given frame
    formatString = 'gif -index %d' %(frame)
    
    try:
        #attempt to load image at given frame
        output = PhotoImage(data=imageData, format=formatString)
    except:
        #fails if exceeded frame limit
        output = None

    return output

def load_images(imageData, startFrame=0):
    #Uses the above function to load images into an array
    outImage = []
    newImage = decode_image(imageData, startFrame)

    #Add images until frame length exceeded
    while newImage:
        outImage.append(newImage)
        startFrame += 1
        newImage = decode_image(imageData, startFrame)

    return outImage

def inc_loop(num, maximum):
    #Increment a number, then resets to 0 if over maximum value
    num += 1
    if num >= maximum:
        num = 0
    return num

def master_loop(master):
    #Recurring loop for widget
    master.curFrame = inc_loop(master.curFrame, master.maxFrame)
    master.imgLabel.configure(image=master.images[master.curFrame])
    master.button.config(state = tkinter.DISABLED)

    #Check for entry fields
    str1 = len(master.entryCard.get())     == STRLEN_CARD
    str2 = len(master.entryExpire.get())   == STRLEN_EXPIRE
    str3 = len(master.entrySecurity.get()) == STRLEN_SECURE

    if (str1 and str2 and str3):
        master.button.config(state = tkinter.NORMAL)
    
    master.after(DELAY, lambda: master_loop(master))


#From here on is the tkinter logic. Honestly I should have
#given this its own class, but it's a low-quality meme to
#begin with, so...

#Begin setting up the tkinter window
master = Tk()
master.resizable(False, False)
master.iconbitmap(default=ICON_PATH)
master.title(STRINGS['caption'][0])

#Frame widget
master.frame = Frame(bg=COLOR,width=W,height=H)
master.frame.pack()

#Load images and set up frame tick timers
master.images   = load_images(IMAGE)
master.curFrame = 0
master.maxFrame = len(master.images)
master.imgLabel = Label(master.frame, image=master.images[0])
master.imgLabel.place(relx=0,rely=0,anchor=tkinter.NW)

#Text entry forms
master.entryCard     = Entry(master.frame, width=26)
master.entryExpire   = Entry(master.frame, width=26)
master.entrySecurity = Entry(master.frame, width=26)

#Place each entry form
master.entryCard.place(    x=278, y=80,  anchor=tkinter.W)
master.entryExpire.place(  x=278, y=104, anchor=tkinter.W)
master.entrySecurity.place(x=278, y=128, anchor=tkinter.W)

#Static text labels
master.entryText1 = Label(
    master.frame,
    font=FIELD_FONT,
    bg=COLOR,
    text=STRINGS['fields'][0],
    justify=tkinter.CENTER
    )
master.entryText2 = Label(
    master.frame,
    font=FIELD_FONT,
    bg=COLOR,
    text=STRINGS['fields'][1],
    justify=tkinter.CENTER
    )
master.entryText3 = Label(
    master.frame,
    font=FIELD_FONT,
    bg=COLOR,
    text=STRINGS['fields'][2],
    justify=tkinter.CENTER
    )
master.message = Label(
    master.frame,
    font=MESSAGE_FONT,
    bg=COLOR,
    text=''.join(STRINGS['message']),
    justify=tkinter.CENTER
    )

#Position labels
master.entryText1.place(x=185, y=80,       anchor=tkinter.W)
master.entryText2.place(x=185, y=104,      anchor=tkinter.W)
master.entryText3.place(x=185, y=128,      anchor=tkinter.W)
master.message.place(relx=0.7, rely=0.025, anchor=tkinter.N)

master.button = Button(
    master.frame,
    bg=COLOR,
    text=''.join(STRINGS['button']),
    command=lambda:safe_quit(master)
    )
master.button.place(relx=0.7, rely=0.95, anchor=tkinter.S)
master_loop(master)
master.mainloop()
