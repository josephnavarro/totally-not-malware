#!usr/bin/env python
"""
The full "malware" application.

Use with caution!
"""
import base64
import tkinter
import tempfile
import zlib
from tkinter import Tk, Label, Frame, Entry, Button
from tkinter import PhotoImage
from image import IMAGE


# Basic stuff
W, H = 440, 180  # Window dimensions in pixels
DELAY = 100  # Frame delay (ms) for GIF
COLOR = '#ffcfff'  # Background window color
STRINGS = {
    # Window caption
    "caption": [
        "Totally Not Malware",
    ],

    # Message displayed above forms
    "message": [
        "H-hi there...\n",
        "Do you th-think I could have your\n",
        "credit card information, p-please?",
    ],

    # Form-filling fields under message
    'fields':  [
        'Card number:',
        'Expiry date:',
        'Security code:',
    ],

    # Text label on button
    "button":  [
        "Th-thanks",
    ],
}

# Fonts for labels and message
FIELD_FONT = "Arial 9 bold"
MESSAGE_FONT = "Arial 11 bold"

# ------------------------------------------------------------------------------
#  Card info isn't actually read in anywhere because
#      - Ethics lol
#
#  So to at least spoof the effect, the application
#  enforces the length of each entry field
# ------------------------------------------------------------------------------

STRLEN_CARD = 16  # Length of card number
STRLEN_EXPIRE = 5  # Length of expiry date
STRLEN_SECURE = 3  # Length of security code

# ------------------------------------------------------------------------------
#  Blank icon
# ------------------------------------------------------------------------------

ICON = zlib.decompress(base64.b64decode('eJxjYGAEQgEBBiDJwZDBy'
                                        'sAgxsDAoAHEQCEGBQaIOAg4sDIgACMUj4JRMApGwQgF/ykEAFXxQRc='))

_, ICON_PATH = tempfile.mkstemp()
with open(ICON_PATH, 'wb') as icon_file:
    icon_file.write(ICON)


def callback(master) -> None:
    """
    Callback function for application button.

    :param master: Window instance.

    :return: None.
    """
    master.destroy()


def decode_image(img, frame) -> tkinter.PhotoImage:
    """
    Decodes a Base64 string into a GIF, split at the given frame.

    :param img:   Full GIF's image data.
    :param frame: Frame index to extract.

    :return: Tkinter PhotoImage.
    """
    fmt = "gif -index {0:d}".format(frame)

    try:
        # Attempt to load image at given frame
        output = PhotoImage(data=img, format=fmt)
    except tkinter.TclError:
        # Fail if frame limit exceeded
        output = None

    return output


def load_images(img, start=0) -> list:
    """
    Loads image data into a single iterable.

    :param img:   Full GIF's image data.
    :param start: Frame to start from. (Default 0).

    :return: List of Tkinter PhotoImages.
    """
    out_image = []
    new_image = decode_image(img, start)

    while new_image:
        # Add images until frame length exceeded
        out_image.append(new_image)
        start += 1
        new_image = decode_image(img, start)

    return out_image


def inc_loop(num, maximum) -> int:
    """
    Increments an integer, then resets to 0 if maximum value is exceeded.

    :param num:     Integer to increment.
    :param maximum: Integer to loop around at.

    :return: Incremented integer.
    """
    num += 1
    if num >= maximum:
        num = 0
    return num


def master_loop(master) -> None:
    """
    Recurring callback function for widget.

    :param master: Main window to apply callback to.

    :return: None.
    """
    master.cur_frame = inc_loop(master.cur_frame, master.max_frame)
    master.img_label.configure(image=master.images[master.cur_frame])
    master.button.config(state=tkinter.DISABLED)

    # Check for matching entry field lengths
    str1 = len(master.entry_card.get()) == STRLEN_CARD
    str2 = len(master.entry_expire.get()) == STRLEN_EXPIRE
    str3 = len(master.entry_security.get()) == STRLEN_SECURE

    if str1 and str2 and str3:
        # "Success" if all fields are of correct length
        master.button.config(state=tkinter.NORMAL)

    master.after(DELAY, lambda: master_loop(master))


def init_window() -> Tk:
    """
    Initializes master window.

    :return: Tkinter window instance.
    """
    master = Tk()
    master.resizable(False, False)
    master.iconbitmap(default=ICON_PATH)
    master.title(STRINGS['caption'][0])

    return master


def init_frame(master) -> None:
    """
    Initializes frame for master window.

    :param master: Window to modify.

    :return: None.
    """
    master.frame = Frame(bg=COLOR, width=W, height=H)
    master.frame.pack()


def init_images(master) -> None:
    """
    Initializes images for master window.

    :param master: Window to modify.

    :return: None.
    """
    master.images = load_images(IMAGE)
    master.cur_frame = 0
    master.max_frame = len(master.images)
    master.img_label = Label(master.frame, image=master.images[0])
    master.img_label.place(relx=0, rely=0, anchor=tkinter.NW)


def init_forms(master) -> None:
    """
    Initializes entry forms for master window.

    :param master: Window to modify.

    :return: None.
    """
    master.entry_card = Entry(master.frame, width=26)
    master.entry_expire = Entry(master.frame, width=26)
    master.entry_security = Entry(master.frame, width=26)

    master.entry_card.place(x=278, y=80, anchor=tkinter.W)
    master.entry_expire.place(x=278, y=104, anchor=tkinter.W)
    master.entry_security.place(x=278, y=128, anchor=tkinter.W)


def init_labels(master) -> None:
    """
    Initializes labels for master window.

    :param master: Window to modify.

    :return: None.
    """
    master.entry_text_1 = Label(
        master.frame,
        font=FIELD_FONT,
        bg=COLOR,
        text=STRINGS["fields"][0],
        justify=tkinter.CENTER
    )

    master.entry_text_2 = Label(
        master.frame,
        font=FIELD_FONT,
        bg=COLOR,
        text=STRINGS["fields"][1],
        justify=tkinter.CENTER
    )

    master.entry_text_3 = Label(
        master.frame,
        font=FIELD_FONT,
        bg=COLOR,
        text=STRINGS["fields"][2],
        justify=tkinter.CENTER
    )

    master.entry_text_1.place(x=185, y=80, anchor=tkinter.W)
    master.entry_text_2.place(x=185, y=104, anchor=tkinter.W)
    master.entry_text_3.place(x=185, y=128, anchor=tkinter.W)


def init_message(master) -> None:
    """
    Initializes message for master window.

    :param master: Window to modify.

    :return: None.
    """
    master.message = Label(
        master.frame,
        font=MESSAGE_FONT,
        bg=COLOR,
        text=''.join(STRINGS["message"]),
        justify=tkinter.CENTER
    )
    master.message.place(relx=0.7, rely=0.025, anchor=tkinter.N)


def init_button(master) -> None:
    """
    Initializes button for master window.

    :param master: Window to modify.

    :return: None.
    """
    master.button = Button(
        master.frame,
        bg=COLOR,
        text=''.join(STRINGS['button']),
        command=lambda: callback(master)
    )

    master.button.place(relx=0.7, rely=0.95, anchor=tkinter.S)


def main() -> None:
    """
    Creates window and invokes main loop.

    :return: None.
    """
    master = init_window()

    init_frame(master)
    init_images(master)
    init_forms(master)
    init_labels(master)
    init_message(master)
    init_button(master)

    master_loop(master)
    master.mainloop()


if __name__ == "__main__":
    main()
